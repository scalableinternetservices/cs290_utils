{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Outputs": {
        "WebsiteURL": {
            "Description": "Rails App URL",
            "Value": {
                "Fn::Join": [
                    "", ["http://",
                         {"Fn::GetAtt": ["WebServer", "PublicDnsName"]}]]}}},
    "Parameters": {
        "InstanceType": {
            "AllowedValues": ["t1.micro", "m1.small", "m1.medium", "m1.large",
                              "m1.xlarge", "m2.xlarge", "m2.2xlarge",
                              "m2.4xlarge", "m3.xlarge", "m3.2xlarge"],
            "ConstraintDescription": "must be a valid t1, m1, or m2 EC2 instance type.",
            "Default": "t1.micro",
            "Description": "WebServer EC2 instance type",
            "Type": "String"},
        "TeamName": {
            "AllowedValues": ["BaconWindshield", "Compete", "Gradr", "Lab-App",
                              "labapp", "LaPlaya", "Motley-Crew", "picShare",
                              "Suppr", "Team-Hytta", "Upvid", "Xup"],
            "ConstraintDescription": "Must exactly match your team name as shown in your GitHub URL.",
            "Description": "CS290 team name (the stack name must start with the team name)",
            "Type": "String"},
        "Branch": {
            "Default": "master",
            "Description": "Git branch to deploy from",
            "Type": "String"}},
    "Resources": {
        "WaitCondition": {
            "DependsOn": "WebServer",
            "Properties": {
                "Handle": {"Ref": "WaitHandle"},
                "Timeout": "1500"},
            "Type": "AWS::CloudFormation::WaitCondition"},
        "WaitHandle": {"Type": "AWS::CloudFormation::WaitConditionHandle"},
        "WebServer": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ec2-user/app/config/database.yml": {
                                "content": {"Fn::Join": ["", [
                                    "production:\n",
                                    "  adapter: mysql2\n",
                                    "  database: rails_app\n"]]}}},
                        "packages": {
                            "yum": {
                                "gcc-c++": [],
                                "git": [],
                                "make": [],
                                "mysql-devel": [],
                                "mysql-server": [],
                                "ruby21-devel": [],
                                "git": []}},
                        "services": {
                            "sysvinit": {
                                "mysqld": {
                                    "enabled": "true",
                                    "ensureRunning": "true"}}},
                        "sources": {
                            "/home/ec2-user/app": {"Fn::Join": ["", [
                                "https://github.com/scalableinternetservices/",
                                {"Ref": "TeamName"}, "/tarball/",
                                {"Ref": "Branch"}]]}}}}},
            "Properties": {
                "ImageId": "ami-55a7ea65",
                "InstanceType": {"Ref": "InstanceType"},
                "KeyName": {"Ref": "TeamName"},
                "SecurityGroups": [{"Ref": "TeamName"}],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash -v\n",
                            "yum update -y aws-cfn-bootstrap\n",
                            "# Helper function\n",
                            "function error_exit {\n",
                            "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                            {"Ref": "WaitHandle"}, "'\n",
                            "  exit 1\n",
                            "}\n",
                            "# Run cfn-init (see AWS::CloudFormation::Init)\n",
                            "/opt/aws/bin/cfn-init -s ",
                            {"Ref": "AWS::StackId"}, " -r WebServer ",
                            "--region ", {"Ref": "AWS::Region"},
                            " || error_exit 'Failed to run cfn-init'\n",
                            "alternatives --set ruby /usr/bin/ruby2.1\n",
                            "alternatives --set gem /usr/bin/gem2.1\n",
                            "# Install bundler only after the alternatives have been set.\n",
                            "gem install bundle\n",
                            "cd /home/ec2-user/app\n",
                            "export PATH=$PATH:/usr/local/bin\n",
                            "export RAILS_ENV=production\n",
                            "export SECRET_KEY_BASE=b801783afb83bb8e614b32ccf6c05c855a927116d92062a75c6ffa61d58c58e62f13eb60cf1a31922c44b7e6a3e8f1809934a7567eaf18b7a43e4887733fb09a\n",
                            "bundle install --without test development || error_exit 'Failed to install bundle'\n",
                            "# Create the database and run the migrations\n",
                            "rake db:create db:migrate || error_exit 'Failed to execute database migration'\n",
                            "# Fix multi_json gem version (>1.7.8 has issues precompiling assets)\n",
                            "echo -e \"\\ngem 'multi_json', '1.7.8'\" >> Gemfile\n",
                            "bundle update multi_json\n",
                            "# Generate static assets\n",
                            "rake assets:precompile || error_exit 'Failed to precompile static assets'\n",
                            "# WEBrick needs to serve static assets\n",
                            "sed -i 's/config.serve_static_assets = false/config.serve_static_assets = true/' config/environments/production.rb\n",
                            "# Startup the rails server\n",
                            "rails server -d -p 80\n",
                            "# All is well so signal success\n",
                            "/opt/aws/bin/cfn-signal -e 0 -r \"Rails application setup complete\" '",
                            {"Ref": "WaitHandle"}, "'\n"]]}}},
            "Type": "AWS::EC2::Instance"}}}
